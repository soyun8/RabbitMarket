<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
	"-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="com.market.rabbit.sale.dao.SaleDAO">
 	<select id="getSaleCategory" resultType="saleCategory">
 		SELECT * FROM sale_category
 	</select>
 	
 	<insert id="save" parameterType="sale" useGeneratedKeys="true" keyProperty="product_idx" keyColumn="product_idx">
 		INSERT INTO sale
 		(
	 		product_idx, 
	 		seller_id, 
	 		sale_subject, 
	 		sale_content, 
	 		price, 
	 		minor, 
	 		negotiation, 
	 		sale_location, 
	 		s_category_idx, 
	 		keyword
 		) VALUES(
 			seq_sale.NEXTVAL,
 			#{seller_id},
 			#{sale_subject}, 
	 		#{sale_content}, 
	 		#{price}, 
	 		#{minor}, 
	 		#{negotiation}, 
	 		#{sale_location}, 
	 		#{s_category_idx}, 
	 		#{keyword}
 		)
 	</insert>
 	
 	<insert id="saveFile" parameterType="sale">
 		INSERT INTO sale_file(file_idx, oriFileName,newFileName,product_idx) VALUES(seq_sale_file.NEXTVAL,#{param2},#{param1}, #{param3})
 	</insert>
 	
 	<delete id="transction" parameterType="int">
 		DELETE FROM sale WHERE product_idx=#{param}
 	</delete>
 	
 	<select id="selectKeywordAlarmMember" resultType="string">
 		SELECT member_id FROM keyword WHERE keyword=#{param1} AND member_id NOT LIKE #{param2} 
 	</select>
 	
 	<insert id="insertKeywordAlarm">
 		INSERT INTO alarm(alarm_idx, alarm_content, member_id, code_num) 
			VALUES(seq_alarm.NEXTVAL, #{param2}, #{param1}, 2002)
 	</insert>
 	
 	<resultMap type="sale" id="callProductList">
 	<id column="product_idx" property="product_idx"/>
 	<result column="seller_id" property="seller_id"/>
 	<result column="sale_subject" property="sale_subject"/>
 	<result column="sale_content" property="sale_content"/>
 	<result column="price" property="price"/>
 	<result column="reg_date" property="reg_date"/>
 	<result column="pull_up_date" property="pull_up_date"/>
 	<result column="sale_location" property="sale_location"/>
 	<result column="code_num" property="code_num"/>
 	<result column="bHit" property="bHit"/>
 	<result column="wishCnt" property="wishCnt"/>
 	<association property="saleFileDto" javaType="saleFile">
 		<result column="newFileName" property="newFileName"/>
 		<result column="ext" property="ext"/>
 	</association>
	</resultMap>
 	
 	<select id="callProductList_unmember" resultMap="callProductList">
 		SELECT * from (SELECT ROW_NUMBER() OVER(ORDER BY pull_up_date DESC) AS rnum, l.product_idx,seller_id,sale_subject, sale_content, price, reg_date,pull_up_date, sale_location, code_num, bHit, wishCnt,newFileName, ext
 		FROM (SELECT p.product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit, nvl(wish,0)as wishCnt 
 		FROM (SELECT product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit
		FROM (SELECT product_idx, seller_id, sale_subject, sale_content, price, reg_date, pull_up_date, sale_location, code_num, bHit FROM sale WHERE isBlind = 0 and isDelete = 0 and code_num != 3003)
		INNER JOIN(SELECT member_id FROM member WHERE isBlack = 0 AND withdraw = 0)ON member_id = seller_id)p 
		LEFT OUTER JOIN (SELECT product_idx, count(wish_idx)as wish FROM wish WHERE isDelete = 0 GROUP BY product_idx)w on p.product_idx = w.product_idx)l
		INNER JOIN (select file_idx, oriFileName, newFileName, product_idx,ext from(select row_number() over(PARTITION BY product_idx ORDER BY file_idx) as rank, file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3)as ext 
		FROM (SELECT * FROM (SELECT file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3) as ext FROM sale_file ORDER BY file_idx ASC ) WHERE ext NOT LIKE 'mp4')) WHERE rank = 1 union 
        select file_idx, oriFileName, newFileName, product_idx,ext from (select s.file_idx, s.orifileName, s.newFileName, s.product_idx, substr(oriFileName, -3) as ext from ((select * from sale_file)s inner join (select * from(select product_idx, count(newFileName)as Cnt from sale_file group by product_idx) where Cnt = 1)s_f on s.product_idx = s_f.product_idx))where ext='mp4'
        )f on l.product_idx = f.product_idx) WHERE rnum between #{param1} and #{param2}
 	</select>
 	
 	<select id="getAge" resultType="int">
 		SELECT MONTHS_BETWEEN(TRUNC(SYSDATE,'YEAR'),TRUNC((SELECT BIRTH_DATE FROM MEMBER WHERE MEMBER_ID=#{param}),'YEAR')) /12 +1 as age FROM DUAL
 	</select>
 	
 	<select id="getLocation" resultType="String">
 		SELECT location FROM member WHERE member_id = #{param}
 	</select>
 	
 	<select id="callProductListMinorMember" resultMap="callProductList">
 		SELECT * from (SELECT ROW_NUMBER() OVER(ORDER BY pull_up_date DESC) AS rnum, l.product_idx, seller_id, sale_subject, sale_content, price, reg_date,pull_up_date, sale_location, code_num, bHit, wishCnt,newFileName, ext
		FROM (SELECT p.product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit, nvl(wish,0)as wishCnt FROM 
		(SELECT product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit 
		FROM (SELECT product_idx, seller_id, sale_subject, sale_content, price, reg_date, pull_up_date, sale_location, code_num, bHit 
		FROM SALE WHERE isBlind = 0 and isDelete = 0 and code_num != 3003 and minor = 1 and sale_location = (SELECT location FROM member WHERE member_id = #{param1}))
		INNER JOIN(SELECT member_id FROM member WHERE isBlack = 0 AND withdraw = 0 and member_id not in(SELECT target_id FROM BLOCK WHERE member_id =#{param1} union SELECT member_id FROM BLOCK WHERE target_id = #{param1}))ON member_id = seller_id)p 
		LEFT OUTER JOIN (SELECT product_idx, count(wish_idx)as wish FROM wish WHERE isDelete = 0 GROUP BY product_idx)w on p.product_idx = w.product_idx)l
		INNER JOIN (select file_idx, oriFileName, newFileName, product_idx,ext from(select row_number() over(PARTITION BY product_idx ORDER BY file_idx) as rank, file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3)as ext 
		FROM (SELECT * FROM (SELECT file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3) as ext FROM sale_file ORDER BY file_idx ASC ) WHERE ext NOT LIKE 'mp4')) WHERE rank = 1 union 
        select file_idx, oriFileName, newFileName, product_idx,ext from (select s.file_idx, s.orifileName, s.newFileName, s.product_idx, substr(oriFileName, -3) as ext from ((select * from sale_file)s inner join (select * from(select product_idx, count(newFileName)as Cnt from sale_file group by product_idx) where Cnt = 1)s_f on s.product_idx = s_f.product_idx))where ext='mp4'
        )f on l.product_idx = f.product_idx) WHERE rnum between #{param2} and #{param3}
 	</select>
 	
 	<select id="callProductListMember" resultMap="callProductList">
 		SELECT * from (SELECT ROW_NUMBER() OVER(ORDER BY pull_up_date DESC) AS rnum, l.product_idx, seller_id, sale_subject, sale_content, price, reg_date,pull_up_date, sale_location, code_num, bHit, wishCnt, newFileName, ext
		FROM (SELECT p.product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit, nvl(wish,0)as wishCnt FROM 
		(SELECT product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit
		FROM (SELECT product_idx, seller_id, sale_subject, sale_content, price, reg_date, pull_up_date, sale_location, code_num, bHit 
		FROM SALE WHERE isBlind = 0 and isDelete = 0 and code_num != 3003 and sale_location = (SELECT location FROM member WHERE member_id = #{param1}))
		INNER JOIN(SELECT member_id FROM member WHERE isBlack = 0 AND withdraw = 0 and member_id not in(SELECT target_id FROM BLOCK WHERE member_id =#{param1} union SELECT member_id FROM BLOCK WHERE target_id =#{param1}))ON member_id = seller_id)p 
		LEFT OUTER JOIN (SELECT product_idx, count(wish_idx)as wish FROM wish WHERE isDelete = 0 GROUP BY product_idx)w on p.product_idx = w.product_idx)l
		INNER JOIN (select file_idx, oriFileName, newFileName, product_idx,ext from(select row_number() over(PARTITION BY product_idx ORDER BY file_idx) as rank, file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3)as ext 
		FROM (SELECT * FROM (SELECT file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3) as ext FROM sale_file ORDER BY file_idx ASC ) WHERE ext NOT LIKE 'mp4')) WHERE rank = 1 union 
        select file_idx, oriFileName, newFileName, product_idx,ext from (select s.file_idx, s.orifileName, s.newFileName, s.product_idx, substr(oriFileName, -3) as ext from ((select * from sale_file)s inner join (select * from(select product_idx, count(newFileName)as Cnt from sale_file group by product_idx) where Cnt = 1)s_f on s.product_idx = s_f.product_idx))where ext='mp4'
        )f on l.product_idx = f.product_idx) WHERE rnum between #{param2} and #{param3}
 	</select>
 	
 	
 	<select id="getEndPage_ummember" resultType="int">
 		SELECT count(product_idx) FROM (SELECT l.product_idx,seller_id,sale_subject, sale_content, price, reg_date,pull_up_date, sale_location, code_num, bHit, wishCnt,newFileName, ext
 		FROM (SELECT p.product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit, nvl(wish,0)as wishCnt 
 		FROM (SELECT product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit
		FROM (SELECT product_idx, seller_id, sale_subject, sale_content, price, reg_date, pull_up_date, sale_location, code_num, bHit FROM sale WHERE isBlind = 0 and isDelete = 0 and code_num != 3003)
		INNER JOIN(SELECT member_id FROM member WHERE isBlack = 0 AND withdraw = 0)ON member_id = seller_id)p 
		LEFT OUTER JOIN (SELECT product_idx, count(wish_idx)as wish FROM wish WHERE isDelete = 0 GROUP BY product_idx)w on p.product_idx = w.product_idx)l
		INNER JOIN (select file_idx, oriFileName, newFileName, product_idx,ext from(select row_number() over(PARTITION BY product_idx ORDER BY file_idx) as rank, file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3)as ext 
		FROM (SELECT * FROM (SELECT file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3) as ext FROM sale_file ORDER BY file_idx ASC ) WHERE ext NOT LIKE 'mp4')) WHERE rank = 1 union 
        select file_idx, oriFileName, newFileName, product_idx,ext from (select s.file_idx, s.orifileName, s.newFileName, s.product_idx, substr(oriFileName, -3) as ext from ((select * from sale_file)s inner join (select * from(select product_idx, count(newFileName)as Cnt from sale_file group by product_idx) where Cnt = 1)s_f on s.product_idx = s_f.product_idx))where ext='mp4'
        )f on l.product_idx = f.product_idx)
 	</select>
 	
 	<select id="getEndPageMinorMember" resultType="int">
 		SELECT count(product_idx) FROM (SELECT l.product_idx, seller_id, sale_subject, sale_content, price, reg_date,pull_up_date, sale_location, code_num, bHit, wishCnt,newFileName 
		FROM (SELECT p.product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit, nvl(wish,0)as wishCnt FROM 
		(SELECT product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit 
		FROM (SELECT product_idx, seller_id, sale_subject, sale_content, price, reg_date, pull_up_date, sale_location, code_num, bHit 
		FROM SALE WHERE isBlind = 0 and isDelete = 0 and code_num != 3003 and minor = 1 and sale_location = (SELECT location FROM member WHERE member_id = #{param1}))
		INNER JOIN(SELECT member_id FROM member WHERE isBlack = 0 AND withdraw = 0 and member_id not in(SELECT target_id FROM BLOCK WHERE member_id =#{param1} union SELECT member_id FROM BLOCK WHERE target_id = #{param1}))ON member_id = seller_id)p 
		LEFT OUTER JOIN (SELECT product_idx, count(wish_idx)as wish FROM wish WHERE isDelete = 0 GROUP BY product_idx)w on p.product_idx = w.product_idx)l
		INNER JOIN (select file_idx, oriFileName, newFileName, product_idx,ext from(select row_number() over(PARTITION BY product_idx ORDER BY file_idx) as rank, file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3)as ext 
		FROM (SELECT * FROM (SELECT file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3) as ext FROM sale_file ORDER BY file_idx ASC ) WHERE ext NOT LIKE 'mp4')) WHERE rank = 1 union 
        select file_idx, oriFileName, newFileName, product_idx,ext from (select s.file_idx, s.orifileName, s.newFileName, s.product_idx, substr(oriFileName, -3) as ext from ((select * from sale_file)s inner join (select * from(select product_idx, count(newFileName)as Cnt from sale_file group by product_idx) where Cnt = 1)s_f on s.product_idx = s_f.product_idx))where ext='mp4'
        )f on l.product_idx = f.product_idx)
 	</select>
 	
 	<select id="getEndPageMember" resultType="int">
 		SELECT count(product_idx) FROM (SELECT l.product_idx, seller_id, sale_subject, sale_content, price, reg_date,pull_up_date, sale_location, code_num, bHit, wishCnt, newFileName 
		FROM (SELECT p.product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit, nvl(wish,0)as wishCnt FROM 
		(SELECT product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, sale_location, code_num, bHit
		FROM (SELECT product_idx, seller_id, sale_subject, sale_content, price, reg_date, pull_up_date, sale_location, code_num, bHit 
		FROM SALE WHERE isBlind = 0 and isDelete = 0 and code_num != 3003 and sale_location = (SELECT location FROM member WHERE member_id = #{param1}))
		INNER JOIN(SELECT member_id FROM member WHERE isBlack = 0 AND withdraw = 0 and member_id not in(SELECT target_id FROM BLOCK WHERE member_id =#{param1} union SELECT member_id FROM BLOCK WHERE target_id =#{param1}))ON member_id = seller_id)p 
		LEFT OUTER JOIN (SELECT product_idx, count(wish_idx)as wish FROM wish WHERE isDelete = 0 GROUP BY product_idx)w on p.product_idx = w.product_idx)l
		INNER JOIN (select file_idx, oriFileName, newFileName, product_idx,ext from(select row_number() over(PARTITION BY product_idx ORDER BY file_idx) as rank, file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3)as ext 
		FROM (SELECT * FROM (SELECT file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3) as ext FROM sale_file ORDER BY file_idx ASC ) WHERE ext NOT LIKE 'mp4')) WHERE rank = 1 union 
        select file_idx, oriFileName, newFileName, product_idx,ext from (select s.file_idx, s.orifileName, s.newFileName, s.product_idx, substr(oriFileName, -3) as ext from ((select * from sale_file)s inner join (select * from(select product_idx, count(newFileName)as Cnt from sale_file group by product_idx) where Cnt = 1)s_f on s.product_idx = s_f.product_idx))where ext='mp4'
        )f on l.product_idx = f.product_idx)
 	</select>
 	
 	<resultMap type="sale" id="callProductDetail">
	 	<id column="product_idx" property="product_idx"/>
	 	<result column="seller_id" property="seller_id"/>
	 	<result column="sale_subject" property="sale_subject"/>
	 	<result column="sale_content" property="sale_content"/>
	 	<result column="price" property="price"/>
	 	<result column="reg_date" property="reg_date"/>
	 	<result column="pull_up_date" property="pull_up_date"/>
	 	<result column="pull_up" property="pull_up"/>
	 	<result column="s_category_idx" property="s_category_idx"/>
	 	<result column="sale_location" property="sale_location"/>
	 	<result column="code_num" property="code_num"/>
	 	<result column="bHit" property="bHit"/>
	 	<result column="wishCnt" property="wishCnt"/>
	 	<result column="minor" property="minor"/>
	 	<result column="negotiation" property="negotiation"/>
	 	<result column="isDelete" property="isDelete"/>
	 	<result column="isBlind" property="isBlind"/>
	 	<result column="fileCnt" property="fileCnt"/>
	 	<association property="memberDto" javaType="member">
	 		<result column="manner_percent" property="manner_percent"/>
	 		<result column="isBlack" property="isBlack"/>
	 		<result column="withdraw" property="withdraw"/>
	 	</association>
	 	<association property="profileFileDto" javaType="profileFile">
	 		<result column="newFileName" property="newFileName"/>
	 	</association>
	</resultMap>
 	
 	<select id="detail" resultMap="callProductDetail">
 		select a.product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, pull_up, sale_location, s_category_idx, code_num, bHit, wishCnt , minor, negotiation, isDelete, isBlind,fileCnt, manner_percent, isBlack, withdraw, newFileName from 
		(select p.product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, pull_up, sale_location, s_category_idx, code_num, bHit, manner_percent, nvl(wish,0)as wishCnt , minor, negotiation, isDelete, isBlind, isBlack,withdraw, newFileName from 
		(select product_idx, seller_id, sale_subject, sale_content,price,reg_date, pull_up_date, pull_up, sale_location, s_category_idx, code_num, bHit, manner_percent, minor, negotiation, isDelete, isBlind, isBlack, withdraw, newFileName
		from (SELECT product_idx, seller_id, sale_subject, sale_content, price, reg_date, sale.pull_up_date, pull_up, sale_location, s_category_idx, code_num, bHit, minor, negotiation, isDelete, isBlind FROM sale)
		left outer join(select mem.member_id,manner_percent,isBlack,withdraw,newFileName from((select member_id, manner_percent, isBlack, withdraw from member)mem left outer join (select member_id, newFileName from profileFile)f on mem.member_id = f.member_id)) ON member_id = seller_id)p 
		left outer join (SELECT product_idx, count(wish_idx)as wish FROM wish WHERE isDelete = 0 group by product_idx)w on p.product_idx = w.product_idx)a
		inner join(select product_idx, count(product_idx)as fileCnt from sale_file group by product_idx)b on a.product_idx = b.product_idx where a.product_idx=#{param}
 	</select>
 	
 	<select id="fileList" resultType="saleFile">
 		SELECT file_idx, oriFileName, newFileName, product_idx, substr(oriFileName, -3) as ext FROM SALE_FILE where product_idx=#{param} ORDER BY FILE_IDX ASC
 	</select>
 	
 	
 	<update id="upHit">
 		UPDATE sale SET bHit = bHit+1 WHERE product_idx=#{param}
 	</update>
 	
 	
 	<resultMap type="comments" id="callCommentList">
	 	<id column="comment_idx" property="comment_idx"/>
	 	<result column="comment_content" property="comment_content"/>
	 	<result column="reg_date" property="reg_date"/>
	 	<result column="isBlind" property="isBlind"/>
	 	<result column="isDelete" property="isDelete"/>
	 	<result column="member_id" property="member_id"/>
	 	<result column="product_idx" property="product_idx"/>
	 	<result column="cocommentCnt" property="cocommentCnt"/>
	 	<association property="memberDto" javaType="member">
	 		<result column="isBlack" property="isBlack"/>
	 		<result column="withdraw" property="withdraw"/>
	 	</association>
	 	<association property="profileFileDto" javaType="profileFile">
	 		<result column="newFileName" property="newFileName"/>
	 	</association>
	</resultMap>
 	
 	<select id="commentList" resultMap="callCommentList">
 		select co.comment_idx, comment_content, reg_date, isBlind, isDelete, member_id, product_idx, newFileName, withdraw,isBlack, nvl(cocommentCnt,0) cocommentCnt
		from ((select comment_idx, comment_content,reg_date,isBlind,isDelete, c.member_id, product_idx, newFileName, withDraw,isBlack from (SELECT * FROM comments where isBlind = 0 and isDelete=0)c inner join
		(select m.member_id, newFileName,withdraw,isBlack from ((select * from member where withdraw=0 and isBlack=0)m left outer join (select * from profileFile)f on m.member_id = f.member_id))mem on c.member_id = mem.member_id)co 
		left outer Join (select comment_idx, count(comment_idx)as cocommentCnt from cocomment where isBlind=0 and isDelete =0 group by comment_idx)coco on co.comment_idx = coco.comment_idx) where product_idx=#{param} order by reg_date ASC
 	</select>
 	
 	<resultMap type="coComent" id="callCocommentList">
	 	<id column="cocomment_idx" property="cocomment_idx"/>
	 	<result column="cocomment_content" property="cocomment_content"/>
	 	<result column="reg_date" property="reg_date"/>
	 	<result column="isBlind" property="isBlind"/>
	 	<result column="isDelete" property="isDelete"/>
	 	<result column="comment_idx" property="comment_idx"/>
	 	<result column="member_id" property="member_id"/>
	 	<association property="memberDto" javaType="member">
	 		<result column="isBlack" property="isBlack"/>
	 		<result column="withdraw" property="withdraw"/>
	 	</association>
	 	<association property="profileFileDto" javaType="profileFile">
	 		<result column="newFileName" property="newFileName"/>
	 	</association>
	</resultMap>
 	
 	<select id="cocommentList" resultMap="callCocommentList">
 		select cocomment_idx, cocomment_content, reg_date, isBlind, isDelete, comment_idx, c.member_id, newFileName, withdraw, isBlack from (SELECT * FROM cocomment where isBlind = 0 and isDelete=0)c inner join
		(select m.member_id, newFileName,withdraw,isblack from ((select * from member where withdraw=0 and isblack=0)m left outer join (select * from profileFile)f on m.member_id = f.member_id))mem on c.member_id = mem.member_id where comment_idx = #{param} ORDER BY reg_date ASC
 	</select>
 	
 	<insert id="commentWrite">
 		INSERT INTO comments(comment_idx, comment_content,member_id,product_idx) VALUES(seq_comment.NEXTVAL,#{param2},#{param3},#{param1})
 	</insert>
 	
 	<insert id="cocommentWrite">
 		insert into cocomment(cocomment_idx, cocomment_content,comment_idx,member_id) values(seq_cocomment.NEXTVAL,#{param2},#{param1},#{param3})
 	</insert>
 	
 	<select id="getSubject" resultType="String">
 		SELECT sale_subject FROM sale WHERE product_idx=#{param}
 	</select>
 	
 	<select id="getMember_id" resultType="String">
 		SELECT seller_id FROM sale WHERE product_idx=#{param}
 	</select>
 	
 	<insert id="sendAlarm">
 		INSERT INTO alarm(alarm_idx, alarm_content, member_id, code_num) VALUES(seq_alarm.NEXTVAL, #{param1},#{param2}, #{param3})
 	</insert>
 	
 	<insert id="report">
 		INSERT INTO report(report_idx, target_idx, code_num, reporter, target, report_reason, report_state) VALUES(seq_report.NEXTVAL, #{param1},#{param2}, #{param5}, #{param3},#{param4},'처리중')
 	</insert>
 	
 	<select id="chReport" resultType="int">
 		SELECT count(report_idx) FROM report WHERE target_idx=#{param1} AND code_num=#{param2} AND reporter=#{param3} 
 	</select>
 	
 	<select id="getTarget" resultType="String">
 		SELECT member_id FROM cocomment WHERE cocomment_idx=#{param1}
 	</select>
 	
 	<update id="pDel">
 		UPDATE sale SET isDelete = 1 WHERE product_idx = #{param}
 	</update>
 	
 	<update id="cDel">
 		UPDATE comments SET isDelete = 1 WHERE comment_idx = #{param}
 	</update>
 	
 	<!-- 대댓글 삭제 -->
 	<update id="ccDel">
 		UPDATE cocomment SET isDelete = 1 WHERE cocomment_idx = #{param}
 	</update>
 	
 	<select id="chWish" resultType="int">
 		SELECT COUNT(wish_idx) FROM wish WHERE member_id= #{param1} AND product_idx= #{param2}
 	</select>
 	
 	<select id="chWishDel" resultType="int">
 		SELECT isDelete FROM wish WHERE member_id= #{param1} AND product_idx= #{param2}
 	</select>
 	
 	<insert id="wishPlus1">
 		INSERT INTO wish(wish_idx, member_id, product_idx) VALUES(seq_wish.NEXTVAL, #{param2}, #{param1})
 	</insert>
 	
 	<update id="wishPlus2">
 		UPDATE wish SET isDelete = 0 WHERE product_idx = #{param1} AND member_id = #{param2}
 	</update>
 	
 	<update id="wishMinus">
 		UPDATE wish SET isDelete = 1 WHERE product_idx = #{param1} AND member_id = #{param2}
 	</update>
 	
 	<select id="existId" resultType="int">
 		SELECT count(member_id) FROM member WHERE member_id = #{param1}
 	</select>
 	
 	<insert id="changeIng">
 		INSERT INTO trading(trade_idx, product_idx, seller_id, buyer_id, trade_type, trade_state) VALUES(seq_trading.NEXTVAL, #{param1}, #{param4}, #{param2}, #{param3},'거래중')
 	</insert>
 	
 	<update id="changeIng2">
 		UPDATE sale SET code_num = 3002 WHERE product_idx = #{param}
 	</update>
 	
 	<select id="getTardeIdx" resultType="int">
 		select trade_idx from (SELECT trade_idx, trade_start_date FROM trading WHERE product_idx=#{param1} AND buyer_id =#{param2} ORDER BY TRADE_START_DATE DESC) where rownum = 1
 	</select>
 	
 	<update id="setMeetDate">
 		UPDATE trading SET TRADE_TIME=#{param2} WHERE trade_idx=#{param1}
 	</update>
 	
 	<select id="getBuyerId" resultType="String">
 		select buyer_id from (SELECT * FROM trading WHERE product_idx=#{param} ORDER BY TRADE_START_DATE DESC)where rownum = 1
 	</select>
 	
 	<select id="getTradeIdx" resultType="int">
 		select trade_idx from (SELECT * FROM trading WHERE product_idx=#{param} ORDER BY TRADE_START_DATE DESC)where rownum = 1
 	</select>
 	
 	<update id="setCancelReason">
 		UPDATE trading SET cancel_reason=#{param2}, trade_end_date=#{param3}, trade_state='거래취소'  WHERE trade_idx=#{param1}
 	</update>
 	
 	<update id="setCodeNum">
 		UPDATE sale SET code_num=3001 WHERE product_idx=#{param}
 	</update>
 	
 	<select id="getTradeType" resultType="String">
 		select trade_type from trading where trade_idx = #{param}
 	</select>
 	
 	<select id="getTracking_Number" resultType="int">
 		select tracking_number from trading where trade_idx = #{param}
 	</select>
 	
 	<update id="setTradeEnd">
 		UPDATE trading SET trade_end_date=#{param2}, trade_state='거래완료'  WHERE trade_idx=#{param1}
 	</update>
 	
 	<update id="setTradeEnd2">
 		UPDATE sale SET code_num=3003 WHERE product_idx=#{param1}
 	</update>
 	
 	<select id="getMannerQuestion" resultType="mannerQuestion">
 		SELECT * FROM mannerQuestion WHERE trade_type='직거래' AND target='구매자' ORDER BY look_order ASC
 	</select>
 	
 	<update id="setTrading">
 		UPDATE trading SET seller_manner=1 WHERE trade_idx=#{param}
 	</update>
 	
 	<select id="getMannerBuyerId" resultType="String">
 		SELECT buyer_id FROM trading WHERE trade_idx=#{param}
 	</select>
 	
 	<update id="setMemberManner">
 		UPDATE member SET manner_score=manner_score+#{param2}, manner_cnt=manner_cnt+1 WHERE member_id = #{param1}
 	</update>
 	
 	<select id="setMemberMannerCnt" resultType="int">
 		SELECT manner_cnt FROM member WHERE member_id=#{param}
 	</select>
 	
 	<update id="setMannerPercent">
 		UPDATE member SET manner_percent = #{param2} WHERE member_id = #{param1}
 	</update>
 	
 	<select id="getmannerScore" resultType="int">
 		SELECT manner_score FROM member WHERE member_id=#{param}
 	</select>
 	
 	<!-- 댓글 수정 -->
 	<update id="commentUpdate">
 		UPDATE comments SET comment_content=#{param2} WHERE comment_idx=#{param1}
 	</update>
 	
 	<!-- 대댓글 수정 -->
 	<update id="cocommentUpdate">
 		UPDATE cocomment SET cocomment_content=#{param2} WHERE cocomment_idx=#{param1}
 	</update>
 	
 	<!-- 운송장번호 알람 가라 -->
	<insert id="alarmWaybillNumber">
		INSERT INTO alarm(alarm_idx, alarm_content, member_id, code_num)
			VALUES (seq_alarm.NEXTVAL, #{param2}, #{param1}, '2008') 
	</insert>
	
	<!-- 검색리스트 -->
 	<select id="callSearchList" resultMap="callSearchListResult">
 		select * 
		from (
		    select s.product_idx, s.seller_id, s.sale_subject, s.sale_content, s.price, s.reg_date, s.pull_up_date, s.pull_up, s.minor, s.negotiation, s.isblind, s.isdelete, s.sale_location, 
		    s.s_category_idx, s.code_num, s.bhit, s.keyword, c.s_category_name, sf.file_idx, sf.newfilename, sf.orifilename,ROW_NUMBER() OVER(PARTITION BY s.product_idx ORDER BY sf.file_idx) as rnumFile
		    from sale s, sale_category c, sale_file sf
		    where s.s_category_idx = c.s_category_idx AND s.product_idx = sf.product_idx
		    )
		where code_num=3001 AND seller_id not in (select target_id from block where member_id=#{param1}) AND sale_subject LIKE #{param2} AND rnumFile=1 AND isblind=0 AND isdelete=0
 	</select>
 	
 	<resultMap type="sale" id="callSearchListResult">
	 	<id column="product_idx" property="product_idx"/>
	 	<result column="seller_id" property="seller_id"/>
	 	<result column="sale_subject" property="sale_subject"/>
	 	<result column="sale_content" property="sale_content"/>
	 	<result column="price" property="price"/>
	 	<result column="reg_date" property="reg_date"/>
	 	<result column="pull_up_date" property="pull_up_date"/>
	 	<result column="sale_location" property="sale_location"/>
	 	<result column="code_num" property="code_num"/>
	 	<result column="bHit" property="bHit"/>
	 	<result column="wishCnt" property="wishCnt"/>
	 	<association property="saleFileDto" javaType="saleFile">
	 		<result column="newFileName" property="newFileName"/>
	 		<result column="file_idx" property="file_idx"/>
	 	</association>
	 	<association property="saleCategoryDTO" javaType="saleCategory">
	 		<result column="s_category_name" property="s_category_name"/>
	 	</association>
	</resultMap>

 	<!-- 거래 완료시 알람 받을 판매자 나와 -->
 	<select id="findSellerThisTrade" resultType="String">
 		SELECT seller_id FROM trading WHERE  trade_idx=#{param1}
 	</select>
 	<!-- 거래 완료시 알람 받을 구매자 나와 -->
 	<select id="findBuyerThisTrade" resultType="String">
 		SELECT buyer_id FROM trading WHERE  trade_idx=#{param1}
 	</select>
 	
 	<!-- 거래 완료시 알람을 보냅니다. -->
 	<insert id="tradeEndAlarm">
 		INSERT INTO alarm(alarm_idx, alarm_content, member_id, code_num)
			VALUES (seq_alarm.NEXTVAL, #{param2}, #{param1}, '2007') 
 	</insert>

 	
 	
 </mapper>